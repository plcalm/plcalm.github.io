<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Github</title>
      <link href="/2021/11/22/GitHub-github/"/>
      <url>/2021/11/22/GitHub-github/</url>
      
        <content type="html"><![CDATA[<h4 id="1-什么是github"><a href="#1-什么是github" class="headerlink" title="1. 什么是github?"></a>1. 什么是github?</h4><p>Github是用于版本控制和协作开发的代码托管平台</p><h4 id="2-为什么要用github"><a href="#2-为什么要用github" class="headerlink" title="2. 为什么要用github?"></a>2. 为什么要用github?</h4><p>Github是最流行的开源项目托管平台，可以在其中找到优秀的项目学习以有助于自己的研究与开发工作</p><h4 id="3-Git是什么？"><a href="#3-Git是什么？" class="headerlink" title="3. Git是什么？"></a>3. Git是什么？</h4><p>Git是一个版本控制系统，使用Git的项目可以更好的进行版本管理，便于对项目做开发、修改、还原和发布等</p><h4 id="4-Github基本概念"><a href="#4-Github基本概念" class="headerlink" title="4. Github基本概念"></a>4. Github基本概念</h4><h5 id="（1）仓库-Repository"><a href="#（1）仓库-Repository" class="headerlink" title="（1）仓库(Repository)"></a>（1）仓库(Repository)</h5><h5 id="（2）本地-local-与远程-remote"><a href="#（2）本地-local-与远程-remote" class="headerlink" title="（2）本地(local)与远程(remote)"></a>（2）本地(local)与远程(remote)</h5><h5 id="（3）分支-Branch"><a href="#（3）分支-Branch" class="headerlink" title="（3）分支(Branch)"></a>（3）分支(Branch)</h5><h5 id="（4）提交-Commit"><a href="#（4）提交-Commit" class="headerlink" title="（4）提交(Commit)"></a>（4）提交(Commit)</h5><h5 id="（5）拉取请求-Pull-Request"><a href="#（5）拉取请求-Pull-Request" class="headerlink" title="（5）拉取请求(Pull Request)"></a>（5）拉取请求(Pull Request)</h5><h5 id="（6）Fork"><a href="#（6）Fork" class="headerlink" title="（6）Fork"></a>（6）Fork</h5><h5 id="（7）克隆-Clone"><a href="#（7）克隆-Clone" class="headerlink" title="（7）克隆(Clone)"></a>（7）克隆(Clone)</h5><h5 id="（8）星标-Star"><a href="#（8）星标-Star" class="headerlink" title="（8）星标(Star)"></a>（8）星标(Star)</h5><h4 id="5-如何使用Github上的开源项目"><a href="#5-如何使用Github上的开源项目" class="headerlink" title="5. 如何使用Github上的开源项目"></a>5. 如何使用Github上的开源项目</h4><h5 id="（1）Case1-我希望使用某个项目"><a href="#（1）Case1-我希望使用某个项目" class="headerlink" title="（1）Case1. 我希望使用某个项目"></a>（1）Case1. 我希望使用某个项目</h5><h5 id="（2）Case2-我希望修改或者为某个项目增加功能"><a href="#（2）Case2-我希望修改或者为某个项目增加功能" class="headerlink" title="（2）Case2. 我希望修改或者为某个项目增加功能"></a>（2）Case2. 我希望修改或者为某个项目增加功能</h5><h4 id="6-Github使用示例"><a href="#6-Github使用示例" class="headerlink" title="6. Github使用示例"></a>6. Github使用示例</h4>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2021/11/21/Linux-linux-sleep-py/"/>
      <url>/2021/11/21/Linux-linux-sleep-py/</url>
      
        <content type="html"><![CDATA[<p>�PNG<br><br><br>IHDR���;���IDATx��yXTU��?00�(N<em>c�����k��a���iITj�f���|-Zl�4}���5�-��̭��r��TD�%W���� 8����r��0���&lt;�yt���<del>�9��w�������Ç�ȑ#PB���ƊE���E(�”%U$��^���+t%���b�_+h��g”�P�9]#�����K�X��$�=��J�X��$�o���”���L�MO��’q�^���&lt;�”��_E|�8�;犧�o�o//�#N֍�):{��’��A)����E�z:�uL”b}�P�d��<code>ʍ:    �&#123;���I�G&lt;��y�w�sZ�A&#123;,��&quot;Nm!�uZ�R�*_�_�E���,������U����&quot;�&#123;W�&gt;�$���e���DX綢IO�u f���� �ua�Z�^kZ�ыfQ;������Y�f-KU/nh&quot;�|!��^U�����&#125;1$٣��3�9c&#123;��K��m&amp;��|JmGO�Оtj֙^��[��F�lk&lt;I�C�?��׆p�����F� j�Єi�o��b�[o����IRh\๤��BZ���?�9ֽ�����TFE����A���3��IId��OR�Ѹ�%��̔�pH;f2��!����Z�    H$��C.p�ĉѸ��t�t    ��+&amp;��M��e�[=�G�8 ��&amp;&#123;1h�(ފz��^�����8�VD��%..���8vm�B�� I���3� :���a/ �BR�!�1�f���&quot;�gs&lt;��z�j-Ze�弄 ��ˠM��p�K�Ǣwnc�#��</code>�o��sHOI%5πo�V�7�So$�A�\g���Ylػ��<br>�4�$��{����B�]�    ������|�S��J��a&amp;}�VVE�e������ɘkubLt���*’�����O�ky)C�Gp</del>����v�����|���<del>eg����z/5�m�UHA��0$0���t�ԝ{&lt;��珓���&gt;Λ�3 �7^!o�t��N��A�fF��</del>‘������S�c�� /�=�7&amp;�伀�3�jꯤ^�^�����u��ֹ|��jR��<br>��1�9B��䟏��y���!�K΁�x!�V��N��ϖ�NkG�gm���It!��B��Ѵ�&lt;R5��z3�_xп&amp;�����o=K�-a���L@W�-ϼ�2O�W�j�g����rI�8��S�|��}�}���&gt;g�=)�jm�{e�P�X�R}?1x[��c<code>�VU�^�a�\�ʂ��&#39;�G��(�D�&#39;!�u�ŪdE(����Q׉��E����Q�£�P��H�HLL�,��Ebb���:F�5���d�(�8�(&quot;%�8f�G�����</code>��%6�,h�؁�”�”%I�y)Px�������={J��1”�S��B��p�.Y��”���/�Ď�_l��x~�”���”�TR;�Ųx���#ġ����PQSu���y�i��r)�E�yǄ�+�u/n�����}��G�I���S</em>BI�(“���=�M�rD|�ѻ�u:1b�)��n�yC1v�)B����e�X��ft/��!V$)B9:Ct�F���מ�� �+؇����O(BIZ&amp;z�V�N�i2L,�#b�ܐ��]L<br>3i�߭<br>F�<br>EI�Eֿ�:�&amp;a�w���ꖱ�u<del>��/�BQ��e���    y�N<br>E�)���ꨚ�J�wY4�^3��l�r&lt;i��b&gt;h�A�QX0&amp;� �50/�z�d��|</del>‘s��t�з��y��X�Ej������ɓn�Bށ����˲s���� ֤֙�{��j��o�\������s�V��l������ڱ���A�j�0�p0�qMh�V��!�Q��&gt;t    ������U�ϫo�vg”�u���3}�UL<br>���l�Xz3<del>�lWK]��5_Zp�K<br>Q��T�ѯ�١/oE�J�U��nA�&amp;�f�d�j���2�g�<br>[毤L��y�Y{�4�^���@�g�G6�_m�b�li�,����|��<br>����&lt;���-L���M�&lt;���S];�5�ӻ]K��7%���w`p��tU}���?bY�5�x����ɉ�xb�MW_�o�������Hm����e�G��p�z��x��s#b��Gλ�՗��q|7^���0���0�[|ϒ�O�A�I���r�*��q�ҕ���p-7����,Z�°����3��O���UL߮�(V���:�Kn&gt;�f�F:�x\�|��{ai���0�w�eڑ��ԖM<br>lؕU��s�F��ܒ��=�խ��N��_an��?�5[�͹Y�����y’�l�w�;nz7�up�����_�L5K��̗j&lt;�@�\�_P7���/s,.<br>3�jx��D��A���5ij.s�ĕ��I�a�f7�}w}�</del>���KŚɿ�U�U�Ú�dWN��”P3�����L�io.w�x���c(<del>-Z�C�I\�R�ƅ`�������pzu{��٠��z���򸒕��x�&lt;���}��w6G�!f�V�l���ֳv�Fv*Y��ܠ�����6S���2���V�4�M�8����:&amp;�ؼ&amp;���z��    �]</del>�;�q���&amp;��]�y$�=��C����,,2�fe<br>_����Z�s�E��c<code>V*���ӫ����7���w~/?.�A������i&lt;=4�q�����ί�+�&#39;���������/�^#w�f��K�L������    _ m%���^��$��ULo�U��s(�2&gt;]^������M���_NC��������z������F�K;��u2������Wѿr��C@�0�&lt;ڀ5���a5u c�?_���s��� ���tʮ.i�i�%�P��/�g�&quot;v�ҋN_��:�@:��������#�ܖ_��7�(��ǰ㦙�</code>��X�CB�L^�    %,6s<em>�GM��9#�?�5Z\ɁU;HW���ž�C�-�uʄ�\K����h�U�o��q��]#h�����)�3x”�T���u.S�<del>�֮��G�N��W&amp;����������z��̀�u���F��N</del>��52y������<em>�szI�f WE����/5�i�%�p���ꪄ�Z��aa�S�������i�����a�E�����,RR!e�R9ʦ<em>��R��U�����$d�A�$RR!eG���I���7��^ah;E��脱A�/j����    ��n�/L�x�RY�%罪</em>��J��B<em>��it�H���%’F�)��Dp��ma��ۻ�m��8~#���:�Km�˜ܳ��Kߵ�p_��swp0��߿�0��B�}�h��B��-���%��3�#�M�t�ٱ�4͗zU��y���qiS���_Wǐ�i�t��Ѻa��w</em>�\2�p���iҚ��Y߽��jr��</em><code>�1t�[��/�&lt;��o������N��O��Ł� ����&#125;��U�e�G(F�M�elR��W�q]��:J�ڛ(R�׉��&#125;��\~��z.�o�D���8�h    �wJl�_���:��o�HT�(����&#125;S��=�e�1t��P�?E��3x�����#y�[z x�O��t�.�6Pq����׫P�j��&#39;���0����&#123;r(�����OW&amp;�z溲ɽVS�z^&quot;y�n��Vd,�F�q���ʀ.�:7�k������h�1�B6����q�����3i��[j�L3q|G��ꘚ���/&#123;��#���=�����E(&#123;����b2�����ƽ$B�7k5l��4f�2X�#����KH�3�X�f��7��h�ewT�#��$�oz��� ��D���b�ڵ���S������T3&gt;#&gt;�b�٥�M;���Q�~*���H�.2Oa�.�k�5&#123;��I�PN���#�]�xs����*b����+BQ���,GC��|HJ�1���6uz�0��h(~,&lt;��9�a����F�0&amp;��הKM��U�c��y�����͌Y�m�S�ۤM�c�����QX�-�e���Ѽ��ND$O|�o~����rO�v�xe&amp;?�o����]���ȇ�+!-Cp�l���&#125;:�د.���ys�&amp;V��&#39;p5˓.O ��q����40���?EG��&#125;L�!�R��n�&quot;�k�d]��1c�h�C���lO��&#39;��������EE�4��Çsxc$~%�4���qL�r�&gt;��&amp;����|�ǿ|�u�E)��KMΚ�U�CGλ������</code>�l�����ٵa��L��֟g�&lt;�v͚Ӽ�(v_�^�i�v~<br>���Y.��*�����Ώ�����[[_�H�� ���&gt;�s=�K��`&gt;��y�̸4Hφ��ٔ�ᾐ�����S���E�;\�0��j<br>,!�G�z�’ȼ�e��m�����xQ��YN��� ��ӄ?5��g˞,҆w���S��|��u2V�]�����</em>�^c��yWO�ܜƊ�޼�x?�TǯYG��&lt;��1q��j��#�<br>��:r80s    �4���f��Q�c2�᷹��F��Gx6��SwB��9�a��:���7������T��̥��{\1_��&gt;�y(����<br>c�p�ã�&amp;y��i.�������5����1id��oM�.�[:��&gt;ޟ�&lt;z�GM��������9WF,59k�#ǰ�v��.�eų$�K�&lt;�� �=5��C��[�_�S��,_�����0;i����OE�(�1�+A���Ѣc�D��s8�7�6�&gt;N�3��x��&lt;7k&lt;”�V��t�����瓈Ql���u����<em>�h���ٹ��k9?-�3�YEO�ͤo���[J�����?c���oa�+#h���Ft�b|�i��%7n4�I���3�����Y�D�Y�3sˏ�&amp;gM�r�:v޵�q�K�׳��A[|\��#�4�+n���j���F^2+�����k[�^\�d��S�6��<br>u��O� �y�6\���]�ϯ&lt;����Q�$�35�’o�X�g9�<br>s�m���c�����d��v��f�’�G..�1U���4�����n�bw�k�&gt;n�<br>�A�������1��l�<del>�k9�֠�2���@ŭD���r5�F֥k�’wղ|�nLH-*��߾d�7�V��jS���&amp;_��z�޵��y�Ѹ�u�#��r,!��|�D+� �+�0�R���Á�P�`��An�/z]�jI���i��N;����8q�̥C�=�Y�<br>�B�������L]p�+E�+5���5��1c��y���Oѫ��rv�����ɋ���^�W���t���!�4”b���}��wx�:�;Z�F�.�Z�7G��xL���|�b�:�����E</del>X�G��’Ck&gt;X�])’��of<br>�&lt;�s���MfW&amp;`����’ЫMj�a�s锝ɮ�0���?PU�ΰnJ��L����t=�’ޥ[5���K6���B�%S?��0<br>v���C’9�kH؀t��K��9r2V0e��”홈�&lt;�ε����ϙzӇ�Njr��/��#���_�Wӈ=�7&gt;ƀ�a7�Ϸ#���L�獔e�x�����.���e�V�F�,,�O��(��xL��)3���^������/,�S�{�E���<br>�G��O6g�’���”��#Ի��’�]!3u�OT7�*ce�y���1’�Q_t���y{�����v�s�u��smz&gt;�G��f�k����jr�K��5���wpIJJ999̙3�)S��^��D�&amp;4��@N�Q�,a�Έ��4t=��]�</em>��b1�kEۦ��G�;x���    �bћ��.�.�g�$.�+)zL��h<del>w-���8��<em>xR��l{��OUF��H$��vQ�ĉ�&quot;qb��H���%’F.p�ĉ��&amp;�$%�M`��    �#�Mڐ�&amp;�T6Y�m�&amp;U�#�M��T6يT6�</em>�Ԍ�T6Y�T6IeS�+�Ԍ�T6YU��I<em>�</em>_٤�l�<br>�l�ʦrp��IUR�d<br>R�$�M��lR�T6Y�T6IeS�+�� �MV!�MR٤��R6�A<em>��B</em>�����Mj��&amp;���&amp;�l��&amp;5�#�M� �MR�T2V6��lҎT691���IUVR٤�l�H�y��D���.�81r�K$N�\��#�D��He�}���&amp;�Q��</del>�3�T6ٿHe��)��/�l<em>�T6��T66<em>��/�l</em>V����”�M�+��߯�C�l��&amp;�lR���*�l��l҈T6���w,�l� �M��Y�M��(�A<em>�<br>��&amp;UHe���&amp;{i�� �M� �M�!�M�+��/�l</em>D<em>��E</em>�lW6ٷ_�C�l��&amp;�lR���r�Je�T6Ie�J�/�l*�l��ʦ�+VE �M�#o�H���%’F.p�ĉ�&quot;qb��H��l�ORR��)�t5    h�[7��`&amp;����~���G</em>��!�M6�l��M��A���u��1��T6�R���V��    �Qل���[Y=���”��w��’c�Չ1�������I<em>�</em>_�TB1���    �P��F����1��&amp;�l��&amp;���D��<del>�z����</del>��T6݌T6iD<em>��E�d���w�C�^�޵E��pNE���l��&amp;�HeS锯lru��z�j^���VxB �MV��:�E�Զqm���b�[�(P65)��({+���    A����</em>�.��l�Ӣl¢l�z�&gt;Nc��feS�3)�����K�<code>�Q��魷�</code>��b�e��1U2H?^�l��”�6���x6+T6}fQ6�S6�UƲD��N�v-    nޔ�’�s�=��џ�ը�_�C�l��l�    gU6����]s�v���ң�A<em>��D</em>����<br>(������}0�k\�Η�&amp;+��&amp;�l�|e�o~����7�}_gr����O�i+Y��He�5He�T6��#�MW�8y�H����z���Ռ&lt;���wR٤�lrbn7e��ɟ&amp;ws���߉�9�z�Ĝ��I=R�$�81�vQ�ĉ�&quot;qb��H���%’F.p�ĉ��&amp;�$%�M<code>��Im;R٤ �l��He��آlRَT6i.R�d+R�تlRӎT6Y�T6IeS�Q6�юT6YU��I*������v���*��I*���Aʦ�ڑ�&amp;���&amp;�l��&amp;�He�UHe�T6U��IU;R�dR�$�M� e��v���*���3�N�g���S�ʦ���M��p</code>u(�[עljZ3���&amp;�Fe�߷<em>��w���7p��Wۨlz΁ʦ�bYtC����</em>G��&amp;�7D�Ϙ��t�ufr��JV6݋��Ä’͟L�Z�[����W6�KU;����1t�[�T6IeS�+�r��kG<em>��#�MR�T2�T6�D</em>��#�MN���lR��T6�F<em>�$’F�.<em>�81r�K$N�\��#�D���.�81R�d����    lP6i�%�Mڐ�&amp;�T6Y�-�&amp;����Is��&amp;[��&amp;�^ʦ�bIe�UHe�T6U��IE,�l��He�T6UeS�����</em>��I</em>���Aʦ�bIe�UHe�T6Ue��XR�d�.�Y�MK�&lt;�� �=5��C�/P6�{�)    ZB�[�4��G��”O*�Ε�lz�hQ6]�(������i&lt;c^e�fgR6�����R.y�R�M[J�<code>Q6]����Y�r�E��g:��P�4ڢZ2S-�%=3�.��k�#�P*�nE*�l�ٔMjbٻ_�+�&amp;��L�(�V,S�V6�Q/���-�&amp;j�Ҳ0��ʦ�*����7�].o�Q��@eSI�,�!� tC@9ʦ��͔�!��V�C_촪de�,f�*,�z �c+g3uAqe������1c��y��l�ʦJW6��Z��1��&amp;�l��&amp;�ƒ�&amp;�He�s&#123;)��ǒ�&amp;�He�D����E%&#39;F.p�ĉ�9wV3bT�(IEND�B</code>�</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Vision Transformer</title>
      <link href="/2021/11/19/DeepLearning-CV-Vision-Transformer/"/>
      <url>/2021/11/19/DeepLearning-CV-Vision-Transformer/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/11/19/DeepLearning-CV-Vision-Transformer/all_pipline.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> 论文解读 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> cv-vit </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>测试图片</title>
      <link href="/2021/11/19/DeepLearning-%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95-test/"/>
      <url>/2021/11/19/DeepLearning-%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95-test/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/11/19/DeepLearning-%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95-test/test.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>docker-天池</title>
      <link href="/2021/11/16/Docker-docker/"/>
      <url>/2021/11/16/Docker-docker/</url>
      
        <content type="html"><![CDATA[<h4 id="1-Linux安装"><a href="#1-Linux安装" class="headerlink" title="1. Linux安装"></a>1. Linux安装</h4><pre class=" language-shell"><code class="language-shell">sudo curl -sS https://get.docker.com/ | sh</code></pre><p>测试</p><pre class=" language-shell"><code class="language-shell">sudo docker run hello-world</code></pre><p>测试运行</p><pre class=" language-shell"><code class="language-shell">docker run -it ubuntu bash</code></pre><p>若有Gpu:</p><pre class=" language-shell"><code class="language-shell">distribution=$(. /etc/os-release;echo $ID$VERSION_ID)curl -s -L https://nvidia.github.io/nvidia-docker/gpgkey | sudo apt-key add -curl -s -L https://nvidia.github.io/nvidia-docker/$distribution/nvidia-docker.list | sudo tee /etc/apt/sources.list.d/nvidia-docker.listsudo apt-get update && sudo apt-get install -y nvidia-container-toolkitsudo systemctl restart docker</code></pre><p>拉取一个pytorch镜像</p><pre class=" language-shell"><code class="language-shell">sudo docker pull registry.cn-shanghai.aliyuncs.com/tcc-public/pytorch:1.4-cuda10.1-py3</code></pre><p>运行</p><pre class=" language-shell"><code class="language-shell">sudo docker run --gpus all -it registry.cn-shanghai.aliyuncs.com/tcc-public/pytorch:1.4-cuda10.1-py3 /bin/bash# 加载gpu，不然容器中加载不了gpu，nvidia-smi命令也找不到， all可以改成0,1,2...</code></pre><h4 id="2-创建镜像仓库账号"><a href="#2-创建镜像仓库账号" class="headerlink" title="2. 创建镜像仓库账号"></a>2. 创建镜像仓库账号</h4><p>打开阿里云容器服务地址：<a href="https://cr.console.aliyun.com/">https://cr.console.aliyun.com</a></p><p>注册个人版</p><p><img src="/2021/11/16/Docker-docker/tianchi_1.png"></p><p>第一步切换标签页到命名空间，创建地址唯一的命名空间</p><p><img src="/2021/11/16/Docker-docker/tianchi_2.png"></p><p>根据大赛要求选择对应的地域，其他按需求填写</p><p><img src="/2021/11/16/Docker-docker/tianchi_3.png"></p><p>下一步，选择本地仓库</p><p><img src="/2021/11/16/Docker-docker/tianchi_4.png"></p><p>点击管理可查看详情</p><p><img src="/2021/11/16/Docker-docker/tianchi_6.png"></p><p>详情页如下，有基本的操作命令，仓库地址一般使用公网地址即可。</p><p><img src="/2021/11/16/Docker-docker/tianchi_7.png"></p><p>按照页面的指令在本地完成登录：</p><pre class=" language-shell"><code class="language-shell"># 切换到超级管理员用户，否则环境变量设置是当前用户，会找不到环境变量export DOCKER_REGISTRY=you_registry_url<docker registry url> # 到命名空间即可（命名空间/仓库名）docker login $DOCKER_REGISTRY --username [...] --password [...]</code></pre><p><img src="/2021/11/16/Docker-docker/tianchi_8.png"></p><p>登录成功就可以push了</p><pre class=" language-shell"><code class="language-shell">docker tag hello-world:latest registry.cn-hangzhou.aliyuncs.com/命名空间/test:0.1  # 先tag一下docker push registry.cn-hangzhou.aliyuncs.com/命名空间/test:0.1            # 再推送</code></pre><p>结果成功：</p><p><img src="/2021/11/16/Docker-docker/tianchi_9.png"></p><h4 id="3-构建docker镜像，push到云端"><a href="#3-构建docker镜像，push到云端" class="headerlink" title="3. 构建docker镜像，push到云端"></a>3. 构建docker镜像，push到云端</h4><pre class=" language-shell"><code class="language-shell"># 下载脚本wget "http://tianchi-media.oss-cn-beijing.aliyuncs.com/docker-tool/tianchi_docker.zip"# 解压unzip tianchi_docker.zipcd tianchi_dockersh docker_build.sh 0.1  # (0.1为自己指定的版本号)</code></pre><p>报错：</p><p><img src="/2021/11/16/Docker-docker/tianchi_10.png"></p><p>修改Dockerfile</p><p><img src="/2021/11/16/Docker-docker/tianchi_11.png"></p><p>修改后</p><p><img src="/2021/11/16/Docker-docker/tianchi_12.png"></p><p>push结束后</p><p>大赛提交镜像</p><p><img src="/2021/11/16/Docker-docker/tianchi_13.png"></p><p>具体参考文后链接。</p><p>利用dockerfile</p><pre class=" language-shell"><code class="language-shell"># 先移除build_docker.shdocker build -t registry.cn-hangzhou.aliyuncs.com/命名空间/tianchi-submit:0.2 .   # 最后一个点是当前路径docker push registry.cn-hangzhou.aliyuncs.com/命名空间/tianchi-submit:0.2 # 上传结束提交即可</code></pre><p>为了解决每次编译都要pip下载的问题，可以修改镜像，然后commit，修改dockerfile即可</p><p>模拟磁盘映射</p><pre class=" language-shell"><code class="language-shell">docker run -it -v /storage:/tcdata registry.cn-shanghai.aliyuncs.com/tcc-public/pytorch:1.4-cuda10.1-py3 # -v 本地路径:镜像路径</code></pre><p>将镜像保存</p><pre class=" language-shell"><code class="language-shell">docker save registry.cn-hangzhou.aliyuncs.com/命名空间/tianchi-submit:0.2 -o 123# 加载docker load -i 123</code></pre><p>参考链接：<a href="https://tianchi.aliyun.com/forum/postDetail?postId=76615">天池大赛从0开始docker提交</a>  <a href="https://tianchi.aliyun.com/specials/activity/promotion/aicampdocker?spm=5176.12281976.0.0.c4ba77c7oCJBRy">参考视频1</a> <a href="https://tianchi.aliyun.com/course/351/4131">参考视频2</a> <a href="https://tianchi.aliyun.com/forum/postDetail?spm=5176.12281915.0.0.570d2cb9SnfgZK&postId=67720">天池基础镜像</a></p><ol><li><p><a href="https://tianchi.aliyun.com/competition/entrance/531863/information">零基础入门Docker-cuda练习场</a></p></li><li><p><a href="https://tianchi.aliyun.com/competition/entrance/231759/information">入门Docker练习场</a></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工具学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tianchi_docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux打卡学习</title>
      <link href="/2021/11/16/Linux-linux/"/>
      <url>/2021/11/16/Linux-linux/</url>
      
        <content type="html"><![CDATA[<h3 id="1-登录服务器"><a href="#1-登录服务器" class="headerlink" title="1. 登录服务器"></a>1. 登录服务器</h3><img src="/2021/11/16/Linux-linux/login.png" style="zoom:80%;"><h3 id="2-在目录下创建文件夹、删除文件夹"><a href="#2-在目录下创建文件夹、删除文件夹" class="headerlink" title="2. 在目录下创建文件夹、删除文件夹"></a>2. 在目录下创建文件夹、删除文件夹</h3><h4 id="Linux的目录结构"><a href="#Linux的目录结构" class="headerlink" title="Linux的目录结构"></a>Linux的目录结构</h4><p><strong>系统启动必须</strong></p><p><strong><code>/etc</code></strong> 系统管理所需的配置文件和子目录</p><p><code>/boot</code> 存放启动Linux时的一些核心文件，包括链接文件以及镜像文件</p><p><code>/lib</code> 系统最基本的动态链接共享库，作用类似 Windows 中的DLL文件</p><p><code>/sys</code> Linux2.6内核的一个很大的变化，安装其内核新出现的一个文件系统sysfs</p><p><strong>指令集合</strong></p><p><strong><code>/bin</code></strong> 存放经常使用的命令，<strong>系统用户</strong></p><p><strong><code>/sbin</code></strong> 超级用户的二进制文件缩写，存放<strong>系统管理员</strong>的系统管理程序</p><p><strong>外部文件管理</strong></p><p><code>/dev</code> Linux的外部设备，Linux中访问设备和访问文件是一样的</p><p><code>/media</code> Linux系统自动识别设备放在这个目录下</p><p><code>/mnt</code> 系统提供该目录为了让用户临时挂载别的文件系统，可以将光驱挂载在这个文件夹下</p><p><strong>临时文件</strong></p><p><code>/run</code> 临时文件系统，存储系统重启以来的信息</p><p><code>/lost+found</code> 当非法关机后，存放一些文件</p><p><code>/tmp</code> 临时文件</p><p><strong>账号</strong></p><p><code>/root</code> 该目录是系统管理员的主目录</p><p><code>/home</code> 用户主目录</p><p><code>/usr</code> 共享资源的缩写，用户应用程序和文件存放处，类似于windows下的 program files目录</p><p><strong><code>/usr/bin</code></strong> <strong>系统用户</strong>所使用的应用程序</p><p><strong><code>/usr/sbin</code></strong> 超级用户使用的比较高级的<strong>管理程序和系统守护程序</strong></p><p><code>/usr/src</code> 内核源代码默认的放置目录</p><p><strong>运行过程中要用</strong></p><p><code>/var</code> 经常需要修改的目录在这个目录下，包括各种日志文件</p><p><code>/proc</code> 一种伪文件系统，存储当前内核运行状态的一系列特殊文件，虚拟目录是内存的映射，可以访问这个目录获取系统信息</p><p><strong>扩展使用</strong></p><p><code>/opt</code> 给主机额外安装软件所摆放的目录</p><p><code>/srv</code> 服务启动之后需要提取的数据</p><p><code>/selinux</code> 这个目录是Redhat/CentOS所特有的目录，Selinux是一个安全机制，类似Windows的防火墙</p><h4 id="Linux文件于目录管理"><a href="#Linux文件于目录管理" class="headerlink" title="Linux文件于目录管理"></a>Linux文件于目录管理</h4><p>Linux的目录结构为树状结构，最顶级的目录为根目录 <code>/</code> </p><p>其他目录通过挂载将它们添加到树种，也可以解除挂载</p><p>绝对路径 <code>/</code> 开始， 相对路径 <code>./</code> 、<code>../</code> 分别表示当前目录和上级目录</p><p><strong>处理目录常用命令</strong></p><p><code>ls</code> 列出目录和文件名</p><p>​    <code>-a</code> 全部文件</p><p>​    <code>-d</code> 仅列出目录本身</p><p>​    <code>-l</code> 长数据串列出，包含文件属性和权限等</p><p><code>cd</code> 切换目录</p><p><code>pwd</code> 显示目前的目录</p><p>​    <code>-P</code> 显示出确实的路径，而不是link路径</p><p><code>mkdir</code> 创建一个目录</p><p>​    <code>-m</code> 配置文件的权限</p><p>​    <code>-p</code> 递归创建目录</p><p><code>rmdir</code> 删除一个空的目录</p><p>​    <code>-p</code> 递归删除，详细目录</p><p><code>cp</code> <code>[--adfilprsu]</code>复制文件或目录， 源+目标</p><p>​    <code>-r</code> 递归持续复制</p><p>​    <code>-s</code> 复制成符号链接</p><p>​    <code>-i</code> 若目标存在，则会询问</p><p><code>rm</code>  <code>-fir</code> 删除文件或目录</p><p>​    <code>-r</code> 递归删除</p><p>​    <code>-f</code> 强制</p><p>​    <code>-i</code> 询问</p><p><code>mv</code>  <code>[-fiu]</code> 移动文件与目录，或者修改文件与目录的名称</p><p>​    <code>-f</code> 强制</p><p>​    <code>-i</code> 询问</p><p>​    <code>-u</code> 若目标已经存在，源比较新才会升级</p><p><strong>Linux文件内容查看</strong></p><p><code>cat</code> <code>[-AbEnTv]</code> 从第一行开始显示文件内容</p><p><code>tac</code> 从最后一行开始显示</p><p><code>nl</code> <code>[-bnw]</code> 显示的时候带上行号</p><p><code>more</code> 一页一页显示文件内容</p><p><code>less</code> 和 <code>more</code> 类似，但是能向前翻页</p><p><code>head</code> <code>[-n]</code> 只看几行</p><p><code>tail</code> <code>[-n]</code> 只看尾部几行</p><p>可以使用 <code>man [命令]</code> 查看命令详细用法</p><p>硬链接和软链接</p><p><code>ln f1 f2</code> 创建硬链接</p><p><code>ln -s f1 f3</code> 创建软链接</p><p><code>ls -li</code> <code>-i</code> 显示文件的inode节点信息</p><pre class=" language-shell"><code class="language-shell">cd /homecd coggle# 创建文件夹 plcalmmkdir plcalmcd plcalm# 创建文件夹 cogglemkdir cogglecd coggle# 创建文件 test.txttouch test.txt# 删除文件 test.txtrm test.txtcd ..# 删除文件夹rm -r coggle/cd ..# 删除文件夹rm -r plcalm/</code></pre><h3 id="3-在目录下下载文件、阅读文件"><a href="#3-在目录下下载文件、阅读文件" class="headerlink" title="3. 在目录下下载文件、阅读文件"></a>3. 在目录下下载文件、阅读文件</h3><p>wget教程：<a href="https://www.cnblogs.com/pretty-ru/p/10936023.html">教程</a></p><p>阅读文件教程：<a href="https://www.cnblogs.com/jixp/p/10833801.html">教程</a></p><pre class=" language-shell"><code class="language-shell"># 在/home/coggle目录下，新建plcalm文件夹cd /home/cogglemkdir plcalm# 在plcalm文件夹中新建coggle文件夹cd plcalm# 下载文件wget https://mirror.coggle.club/dataset/affairs.txt# 使用head、cat、tail 文件查看文件head -n 10 affairs.txttail -n 10 affairs.txtcat affairs.txt# 使用ipython进入python环境ipython>>>import pandas as pd>>>data = pd.read_table("affairs.txt", sep=",")>>>data[:5]            # 打印前5行</code></pre><p><strong>利用pandas读取和写入文件</strong></p><p>读取.csv文件：pd.read_csv(path,[index_col=列的下标]), 路径上可以加上r，防止路径产生歧义</p><p>读取.txt文件：pd.read_table(path, sep=”,”), 以’,’为分隔符号读入</p><p>读取.excel文件：pd.read_excel(path)</p><p>写入.csv文件：变量名.to_csv(文件路径+文件名, index=False)</p><p>写入.txt文件：变量名.to_csv(文件路径+名字，sep=’\t’, index=False)</p><p>写入.excel文件：变量名.to_excel(文件名+名字, index=False)</p><h3 id="4-在目录下使用vi或vim编辑文件"><a href="#4-在目录下使用vi或vim编辑文件" class="headerlink" title="4. 在目录下使用vi或vim编辑文件"></a>4. 在目录下使用vi或vim编辑文件</h3><p>Nano教程：<a href="https://blog.csdn.net/junxieshiguan/article/details/84104912">教程</a></p><p><code>Ctrl+G</code> 相当于指令说明书</p><p><code>Ctrl+X</code> 离开nano软件</p><p><code>Ctrl+C</code> 显示光标处行列信息</p><p>Vim教程：<a href="https://www.runoob.com/linux/linux-vim.html">教程</a></p><p>三种模式：命令模式、输入模式、底线命令模式</p><p>刚启动便是命令模式，输入 <code>i</code> 进入输入模式，<code>x</code> 删除光标所在字符，<code>:</code> 切换到底线命令模式</p><p>输入模式，正常输入即可，<code>ESC</code> 退出输入模式，<code>insert</code> 切换光标为输入/替换模式，光标变成竖线/下划线</p><p>底线命令模式，在命令模式，<code>:</code> 进入底线命令模式，<code>q</code> 退出程序，<code>w</code> 保存程序，<code>!</code> 强制退出</p><h3 id="5-在目录下创建py文件，并运行"><a href="#5-在目录下创建py文件，并运行" class="headerlink" title="5. 在目录下创建py文件，并运行"></a>5. 在目录下创建py文件，并运行</h3><p>os模块：<a href="https://www.runoob.com/python/os-file-methods.html">教程</a></p><p>sys模块：<a href="https://www.runoob.com/python3/python3-module.html">教程</a></p><pre class=" language-shell"><code class="language-shell"># 新建文件test5.pycd /home/coggletouch test5.pyvim test5.py"""程序：#!/usr/bin/env python3import sysprint('命令参数如下：')for i in sys.argv:    print(i)"""python3 test5.py</code></pre><p>结果：</p><img src="/2021/11/16/Linux-linux/1.png"><pre class=" language-shell"><code class="language-shell"># 打印/usr/bin/下的所有m开头的文件touch test_os.pyvim test_os.py"""程序#!/usr/bin/env python3import osfile_data = os.listdir("/usr/bin")for i in file_data:    file = os.path.split(i)    if file[-1][0] == "m":        print(file[-1])"""</code></pre><p>结果：</p><img src="/2021/11/16/Linux-linux/2.png" style="zoom:80%;"><h3 id="6-在目录下创建py目录，并进行import导入"><a href="#6-在目录下创建py目录，并进行import导入" class="headerlink" title="6. 在目录下创建py目录，并进行import导入"></a>6. 在目录下创建py目录，并进行import导入</h3><p>学习python模块化，<a href="https://www.runoob.com/python3/python3-module.html">教程</a></p><pre class=" language-shell"><code class="language-shell"># /home/coggle/plcalm# 新建文件夹affairsmkdir affairscd affairs# 新建affairs.py"""程序：#!/usr/bin/env python3import pandas as pddef read_data(path):    data = pd.read_csv(path,sep=',')    return data"""# /home/coggle/plcalm# 新建test6.py"""程序：#!/usr/bin/env python3import sysfrom affairs.affairs import read_datarow = sys.argv[1]data = read_data("https://mirror.coggle.club/dataset/affairs.txt")print(data.iloc[int(row)])                           """</code></pre><img src="/2021/11/16/Linux-linux/3.png" style="zoom:80%;"><h4 id="7-在Linux系统中后台运行应用程序"><a href="#7-在Linux系统中后台运行应用程序" class="headerlink" title="7. 在Linux系统中后台运行应用程序"></a>7. 在Linux系统中后台运行应用程序</h4><p>步骤1：新建sleep.py文件，实现功能-1.程序一致运行，2. 每10秒输出当前时间</p><p>代码：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># sleep.py</span><span class="token keyword">import</span> time <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span></code></pre><p>运行结果</p><p><img src="/2021/11/16/Linux-linux/sleep_py.md"></p><p>步骤2：学习 <code>&amp;</code> 和 <code>nohup</code> 后台执行方法</p><p>参考：<a href="https://blog.csdn.net/a736933735/article/details/89577557">https://blog.csdn.net/a736933735/article/details/89577557</a></p><p>​          <a href="http://ipcmen.com/jobs">http://ipcmen.com/jobs</a></p><p>步骤3：学习 <code>tmux</code> 的使用，将步骤1的程序进行后台运行，并将输出结果写入到txt文件。</p>]]></content>
      
      
      <categories>
          
          <category> 工具学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
